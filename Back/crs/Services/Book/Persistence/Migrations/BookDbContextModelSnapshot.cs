// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DbContexts;

#nullable disable

namespace Persistence.Migrations;

[DbContext(typeof(BookDbContext))]
partial class BookDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.7")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Domain.AuthorAggregate.Author", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Pseudonym")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasAlternateKey("Pseudonym");

                b.ToTable("Authors");
            });

        modelBuilder.Entity("Domain.BookAggregate.Book", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("AuthorId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<Guid>("GenreId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("LanguageId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("PageCount")
                    .HasColumnType("int");

                b.Property<Guid>("PosterId")
                    .HasColumnType("uniqueidentifier");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.Property<int>("SoldUnits")
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.HasIndex("GenreId");

                b.HasIndex("LanguageId");

                b.HasIndex("PosterId")
                    .IsUnique();

                b.ToTable("Books");
            });

        modelBuilder.Entity("Domain.CartAggregate.Cart", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime?>("ExpirationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Carts");
            });

        modelBuilder.Entity("Domain.CartAggregate.Entities.CartItem", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("BookId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CartId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("CartId");

                b.ToTable("CartItems", t =>
                    {
                        t.HasTrigger("SomeTrigger");
                    });

                b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
            });

        modelBuilder.Entity("Domain.Core.Messages.OutboxMessages.OutboxMessage", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Error")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("ProcessedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("OutboxMessages");
            });

        modelBuilder.Entity("Domain.Core.Messages.OutboxMessages.OutboxMessageConsumer", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("OutboxMessageConsumers");
            });

        modelBuilder.Entity("Domain.GenreAggregate.Genre", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.HasAlternateKey("Name");

                b.ToTable("Genres");
            });

        modelBuilder.Entity("Domain.LanguageAggregate.Language", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(35)
                    .HasColumnType("nvarchar(35)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasAlternateKey("Code");

                b.ToTable("Languages");
            });

        modelBuilder.Entity("Domain.SharedKernel.Entities.Image", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Bucket")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.HasKey("Id");

                b.ToTable("Images");
            });

        modelBuilder.Entity("Domain.UserAggregate.User", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("EmailConfirmationToken")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<bool>("IsEmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("PasswordSalt")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ResetPasswordToken")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasAlternateKey("Email");

                b.ToTable("Users");
            });

        modelBuilder.Entity("Domain.WishAggregate.Entities.WishItem", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("BookId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("WishId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("WishId");

                b.ToTable("WishItems");
            });

        modelBuilder.Entity("Domain.WishAggregate.Wish", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Wishes");
            });

        modelBuilder.Entity("Domain.BookAggregate.Book", b =>
            {
                b.HasOne("Domain.AuthorAggregate.Author", "Author")
                    .WithMany("Books")
                    .HasForeignKey("AuthorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Domain.GenreAggregate.Genre", "Genre")
                    .WithMany("Books")
                    .HasForeignKey("GenreId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Domain.LanguageAggregate.Language", "Language")
                    .WithMany("Books")
                    .HasForeignKey("LanguageId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Domain.SharedKernel.Entities.Image", "Poster")
                    .WithOne()
                    .HasForeignKey("Domain.BookAggregate.Book", "PosterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Author");

                b.Navigation("Genre");

                b.Navigation("Language");

                b.Navigation("Poster");
            });

        modelBuilder.Entity("Domain.CartAggregate.Cart", b =>
            {
                b.HasOne("Domain.UserAggregate.User", null)
                    .WithOne("Cart")
                    .HasForeignKey("Domain.CartAggregate.Cart", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.CartAggregate.Entities.CartItem", b =>
            {
                b.HasOne("Domain.BookAggregate.Book", "Book")
                    .WithMany()
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Domain.CartAggregate.Cart", null)
                    .WithMany("Items")
                    .HasForeignKey("CartId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Book");
            });

        modelBuilder.Entity("Domain.UserAggregate.User", b =>
            {
                b.OwnsOne("Domain.UserAggregate.ValueObjects.RefreshToken", "RefreshToken", b1 =>
                    {
                        b1.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");

                        b1.Property<DateTime>("ExpiredTime")
                            .HasColumnType("datetime2");

                        b1.Property<string>("Token")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)");

                        b1.HasKey("UserId");

                        b1.ToTable("Users");

                        b1.WithOwner()
                            .HasForeignKey("UserId");
                    });

                b.Navigation("RefreshToken");
            });

        modelBuilder.Entity("Domain.WishAggregate.Entities.WishItem", b =>
            {
                b.HasOne("Domain.BookAggregate.Book", "Book")
                    .WithMany()
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("Domain.WishAggregate.Wish", null)
                    .WithMany("Items")
                    .HasForeignKey("WishId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Book");
            });

        modelBuilder.Entity("Domain.WishAggregate.Wish", b =>
            {
                b.HasOne("Domain.UserAggregate.User", null)
                    .WithOne("Wish")
                    .HasForeignKey("Domain.WishAggregate.Wish", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.AuthorAggregate.Author", b =>
            {
                b.Navigation("Books");
            });

        modelBuilder.Entity("Domain.CartAggregate.Cart", b =>
            {
                b.Navigation("Items");
            });

        modelBuilder.Entity("Domain.GenreAggregate.Genre", b =>
            {
                b.Navigation("Books");
            });

        modelBuilder.Entity("Domain.LanguageAggregate.Language", b =>
            {
                b.Navigation("Books");
            });

        modelBuilder.Entity("Domain.UserAggregate.User", b =>
            {
                b.Navigation("Cart")
                    .IsRequired();

                b.Navigation("Wish")
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.WishAggregate.Wish", b =>
            {
                b.Navigation("Items");
            });
#pragma warning restore 612, 618
    }
}
